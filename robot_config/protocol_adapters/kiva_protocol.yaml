# Kiva/Amazon AGV 协议适配器配置
# 展示多厂家协议支持能力
# =====================================

adapter_info:
  name: "Kiva AGV Protocol Adapter"  
  version: "1.0.0"
  manufacturer: "Amazon/Kiva"
  description: "Kiva机器人TCP协议适配器"
  active: false  # 默认不激活
  priority: 2    # 优先级低于SEER

# 协议特性
protocol_features:
  # 连接特性
  connection_type: "TCP_BINARY"
  heartbeat_required: true
  session_management: true
  
  # 消息特性  
  message_format: "BINARY_PROTOCOL"
  endianness: "big_endian"
  header_size: 8
  checksum_type: "CRC16"
  
  # 安全特性
  authentication_required: false
  encryption_supported: false

# TCP端口配置 (Kiva协议端口范围)
tcp_ports:
  # 主控制端口
  main_control: 8001
  # 状态上报端口
  status_reporting: 8002
  # 任务分发端口
  task_dispatch: 8003
  # 紧急控制端口
  emergency_control: 8004

# Kiva协议消息类型映射
message_type_mapping:
  # 基础控制
  basic_control:
    robot_enable: {type: 0x01, port: 8001, format: "kiva_enable"}
    robot_disable: {type: 0x02, port: 8001, format: "kiva_disable"}
    heartbeat: {type: 0x03, port: 8001, format: "kiva_heartbeat"}
  
  # 运动控制
  motion_control:
    move_forward: {type: 0x10, port: 8003, format: "kiva_move"}
    move_backward: {type: 0x11, port: 8003, format: "kiva_move"}
    turn_left: {type: 0x12, port: 8003, format: "kiva_turn"}
    turn_right: {type: 0x13, port: 8003, format: "kiva_turn"}
    lift_pod: {type: 0x20, port: 8003, format: "kiva_lift"}
    drop_pod: {type: 0x21, port: 8003, format: "kiva_lift"}
  
  # 导航控制
  navigation_control:
    dock_request: {type: 0x30, port: 8003, format: "kiva_dock"}
    undock_request: {type: 0x31, port: 8003, format: "kiva_dock"}
    locate_fiducial: {type: 0x32, port: 8003, format: "kiva_fiducial"}
  
  # 状态查询
  status_control:
    status_request: {type: 0x40, port: 8002, format: "kiva_status_req"}
    battery_status: {type: 0x41, port: 8002, format: "kiva_battery"}
    error_status: {type: 0x42, port: 8002, format: "kiva_error"}
  
  # 紧急控制
  emergency_control:
    emergency_stop: {type: 0x50, port: 8004, format: "kiva_emergency"}
    emergency_release: {type: 0x51, port: 8004, format: "kiva_emergency"}

# VDA5050到Kiva协议的动作映射
vda5050_to_kiva_mapping:
  # 基础控制
  cancelOrder:
    kiva_commands:
      - {type: "emergency_control.emergency_stop", delay: 0}
      - {type: "basic_control.robot_disable", delay: 100}
    
  startPause:
    kiva_commands:
      - {type: "emergency_control.emergency_stop", delay: 0}
    
  stopPause:
    kiva_commands:
      - {type: "emergency_control.emergency_release", delay: 0}
      - {type: "basic_control.robot_enable", delay: 100}
  
  # 运动控制
  translate:
    kiva_commands:
      - {type: "motion_control.move_forward", delay: 0}
    parameter_mapping:
      dist: "distance"
  
  turn:
    kiva_commands:
      - {type: "motion_control.turn_left", delay: 0, condition: "angle > 0"}
      - {type: "motion_control.turn_right", delay: 0, condition: "angle < 0"}
    parameter_mapping:
      angle: "turn_angle"
  
  # 货物操作
  pick:
    kiva_commands:
      - {type: "navigation_control.dock_request", delay: 0}
      - {type: "motion_control.lift_pod", delay: 2000}
    
  drop:
    kiva_commands:
      - {type: "motion_control.drop_pod", delay: 0}
      - {type: "navigation_control.undock_request", delay: 1000}
  
  # 错误处理
  clearErrors:
    kiva_commands:
      - {type: "emergency_control.emergency_release", delay: 0}
      - {type: "basic_control.robot_enable", delay: 500}

# 数据格式定义
data_formats:
  kiva_enable:
    format: "binary"
    structure:
      - {name: "robot_id", type: "uint16", offset: 0}
      - {name: "enable_flag", type: "uint8", offset: 2}
    
  kiva_move:
    format: "binary"
    structure:
      - {name: "robot_id", type: "uint16", offset: 0}
      - {name: "distance", type: "float32", offset: 2}
      - {name: "speed", type: "uint16", offset: 6}
    
  kiva_turn:
    format: "binary"
    structure:
      - {name: "robot_id", type: "uint16", offset: 0}
      - {name: "turn_angle", type: "int16", offset: 2}
      - {name: "turn_speed", type: "uint16", offset: 4}
    
  kiva_lift:
    format: "binary"
    structure:
      - {name: "robot_id", type: "uint16", offset: 0}
      - {name: "lift_height", type: "uint16", offset: 2}
    
  kiva_status_req:
    format: "binary"
    structure:
      - {name: "robot_id", type: "uint16", offset: 0}
      - {name: "status_type", type: "uint8", offset: 2}

# 状态数据解析配置
status_parsing:
  # Kiva状态消息解析
  kiva_status_response:
    format: "binary"
    structure:
      - {name: "robot_id", type: "uint16", offset: 0}
      - {name: "position_x", type: "float32", offset: 2}
      - {name: "position_y", type: "float32", offset: 6}
      - {name: "orientation", type: "float32", offset: 10}
      - {name: "battery_level", type: "uint8", offset: 14}
      - {name: "status_flags", type: "uint16", offset: 15}
      - {name: "error_code", type: "uint16", offset: 17}
    
    # 到VDA5050状态的映射
    vda5050_mapping:
      agv_position:
        x: "position_x"
        y: "position_y" 
        theta: "orientation"
      battery_state:
        batteryCharge: "battery_level"
      operating_mode: "AUTOMATIC"  # 固定值
      driving: "status_flags & 0x01"  # 位操作
      errors: "error_code"  # 需要进一步映射

# 连接管理配置
connection_management:
  # 连接参数
  connection_timeout: 10.0
  keep_alive_interval: 5.0
  max_retries: 3
  
  # 会话管理
  session_timeout: 300.0
  authentication_timeout: 10.0
  
  # 消息队列
  max_queue_size: 100
  message_timeout: 30.0 